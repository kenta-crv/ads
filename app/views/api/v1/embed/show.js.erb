(async function() {
  function urlBase64ToUint8Array(base64String) {
    if (!base64String || base64String.length === 0) {
      throw new Error('VAPID public key is missing or empty');
    }
    
    const padding = "=".repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
      .replace(/-/g, "+")
      .replace(/_/g, "/");

    const rawData = atob(base64);
    return Uint8Array.from([...rawData].map(c => c.charCodeAt(0)));
  }

  async function subscribeUser(registration, vapidKey) {
    try {
      // Check for existing subscription
      const existingSubscription = await registration.pushManager.getSubscription();
      
      if (existingSubscription) {
        console.log('Found existing subscription, unsubscribing first...');
        await existingSubscription.unsubscribe();
        console.log('Successfully unsubscribed from previous subscription');
      }

      // Create new subscription with our VAPID key
      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: urlBase64ToUint8Array(vapidKey)
      });

      console.log('Successfully subscribed to push notifications');
      return subscription;

    } catch (error) {
      if (error.name === 'InvalidStateError' && error.message.includes('applicationServerKey')) {
        console.log('Attempting to force resubscription...');
        // Try to get existing subscription and unsubscribe
        try {
          const existingSubscription = await registration.pushManager.getSubscription();
          if (existingSubscription) {
            await existingSubscription.unsubscribe();
            console.log('Force unsubscribed, trying again...');
            
            // Wait a moment and try again
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            return await registration.pushManager.subscribe({
              userVisibleOnly: true,
              applicationServerKey: urlBase64ToUint8Array(vapidKey)
            });
          }
        } catch (forceError) {
          console.error('Force resubscription failed:', forceError);
        }
      }
      throw error;
    }
  }

  if ("serviceWorker" in navigator && "PushManager" in window) {
    try {
      const reg = await navigator.serviceWorker.register("/service-worker.js");
      console.log('Service worker registered successfully');

      const permission = await Notification.requestPermission();
      if (permission !== "granted") {
        console.log('Notification permission denied');
        return;
      }

      // Get VAPID public key from Rails
      const vapidKey = "<%= Rails.application.credentials.dig(:vapid, :public_key) || ENV['VAPID_PUBLIC_KEY'] || 'BKd_dUYW4j5gCg4tEbE8M7dEBKz4W4QKbSE7VQP1L6H8v4G7KzRxF9H2Lk8F1P_RQaZ1Wr8H4Yc2F3J5Q7B6XeQ' %>";
      
      if (!vapidKey) {
        console.error('VAPID public key is not configured. Please set it in Rails credentials or environment variables.');
        alert('Push notifications are not configured. Please contact the administrator.');
        return;
      }

      const subscription = await subscribeUser(reg, vapidKey);

      const response = await fetch("/api/v1/subscribers", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(subscription.toJSON())
      });

      if (response.ok) {
        const result = await response.json();
        console.log('Subscription saved to server:', result);
        
        // Notify the main page that subscription is complete
        window.postMessage({
          type: 'SUBSCRIPTION_COMPLETE',
          result: result
        }, '*');
        
      } else {
        const error = await response.json();
        console.error('Failed to save subscription to server:', error);
      }

    } catch (error) {
      console.error('Push notification setup failed:', error);
      
      if (error.name === 'InvalidStateError') {
        alert('There was a conflict with existing push subscriptions. Please clear your browser data and try again, or contact support.');
      } else if (error.message.includes('applicationServerKey')) {
        alert('Invalid VAPID key configuration. Please check the server setup.');
      } else {
        alert('Failed to set up push notifications: ' + error.message);
      }
    }
  } else {
    console.log('Push notifications are not supported in this browser');
  }
})();
